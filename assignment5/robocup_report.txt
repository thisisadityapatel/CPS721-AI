
% Enter the names of your group members below.
% If you only have 2 group members, leave the last space blank
%
%%%%%
%%%%% NAME: Patel, Aditya Kamleshkumar
%%%%% NAME: Osadebe, Osanyem
%%%%% NAME:
%

%%%%% SECTION: cpu_details
%%%%% Describe the system you ran your tests on below.
%%%%% It should include information about the processor (mainly speed), 
%%%%% amount of RAM, and operator system you ran your tests on.
Processor: Apple M1 Pro chip with an 8-core CPU (6 high-performance and 2 efficiency cores). The clock speed varies, but the high-performance cores operate up to 3.2 GHz.
RAM: 16 GB of unified memory (RAM).
Operating System: macOS 15.1 (Sequoia).


%%%%% SECTION: summary
%%%%% Summarize your results in 5-10 sentences. Describe which states you tested on, 
%%%%% which ones ran in a reasonable amount of time (and how long they took), and 
%%%%% how much speedup you saw when using declarative heuristics. Report any other 
%%%%% interesting behaviour you saw.

The planner's performance was evaluated across all Robocup goal states (11-16 from init1 and 21-22 from init2). Testing revealed substantial speed improvements when heuristics were enabled. A notable example is goal state 21, where planning time dropped from 26.85 seconds without heuristics to 18 seconds with them - a 33% reduction.
Each additional heuristic rule further improved planning efficiency by pruning unnecessary actions from the search space. For instance, preventing post-goal shots and invalid passes eliminated many redundant paths, while the strategic positioning rules helped guide robots toward optimal solutions more quickly. This meant fewer wasted moves and faster convergence to valid solutions.
The enhanced performance wasn't just about speed - the solutions were also more streamlined, containing fewer unnecessary actions. This efficiency gain became particularly evident in complex scenarios requiring multiple robot coordination, like those involving passing sequences or strategic positioning near the goal.


%%%%% SECTION: log
%%%%% Show the actual queries you ran below, along with the output
%%%%% This should include runtime and the actual plan found

%%%%% Goal 11
% Query:
?- solve_problem(regular, 11, 10, Plan).
Plan = [move(r1, 0, 0, 0, 1), move(r1, 1, 0, 0, 0)]
Yes (0.00s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.0

% Query:
?- solve_problem(heuristic, 11, 10, Plan).
Plan = [move(r1, 0, 0, 0, 1), move(r1, 1, 0, 0, 0)]
Yes (0.00s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.0

%%%%% Goal 12
% Query:
?- solve_problem(regular, 12, 10, Plan).
Plan = [pass(r1, r2), move(r1, 1, 0, 0, 0)]
Yes (0.01s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.0

% Query:
?- solve_problem(heuristic, 12, 10, Plan).
Plan = [pass(r1, r2), move(r1, 1, 0, 0, 0)]
Yes (0.01s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.0

%%%%% Goal 13
% Query:
?- solve_problem(regular, 13, 10, Plan).
Plan = [pass(r2, r3), pass(r1, r2), move(r3, 3, 1, 3, 2), move(r1, 1, 0, 0, 0)]
Yes (0.01s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.00999999999999091

% Query:
?- solve_problem(heuristic, 13, 10, Plan).
Plan = [pass(r2, r3), pass(r1, r2), move(r3, 3, 1, 3, 2), move(r1, 1, 0, 0, 0)]
Yes (0.01s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.00999999999999091

%%%%% Goal 14
% Query:
?- solve_problem(regular, 14, 10, Plan).
Plan = [shoot(r3), move(r3, 3, 2, 3, 1), pass(r2, r3), pass(r1, r2), move(r3, 3, 1, 3, 2), move(r1, 1, 0, 0, 0)]
Yes (0.14s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.1400000000001

% Query:
?- solve_problem(heuristic, 14, 10, Plan).
Plan = [shoot(r3), move(r3, 3, 2, 3, 1), pass(r2, r3), pass(r1, r2), move(r3, 3, 1, 3, 2), move(r1, 1, 0, 0, 0)]
Yes (0.10s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.0999999999999091

%%%%% Goal 15
% Query:
?- solve_problem(regular, 15, 10, Plan).
Plan = [move(r1, 1, 2, 2, 2), move(r2, 2, 2, 3, 2), move(r1, 0, 2, 1, 2), move(r2, 1, 2, 2, 2), move(r1, 0, 1, 0, 2), move(r2, 0, 2, 1, 2), move(r1, 0, 0, 0, 1), move(r1, 1, 0, 0, 0)]
Yes (2.60s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 2.60000000000014

% Query:
?- solve_problem(heuristic, 15, 10, Plan).
Plan = [move(r1, 1, 2, 2, 2), move(r2, 2, 2, 3, 2), move(r1, 0, 2, 1, 2), move(r2, 1, 2, 2, 2), move(r1, 0, 1, 0, 2), move(r2, 0, 2, 1, 2), move(r1, 0, 0, 0, 1), move(r1, 1, 0, 0, 0)]
Yes (0.75s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 0.75

%%%%% Goal 16
% Query:
?- solve_problem(heuristic, 16, 20, Plan).
Plan = [move(r1, 2, 2, 3, 2), move(r2, 3, 2, 3, 1), move(r3, 3, 1, 3, 0), move(r1, 1, 2, 2, 2), move(r2, 2, 2, 3, 2), move(r1, 0, 2, 1, 2), move(r2, 1, 2, 2, 2), move(r1, 0, 1, 0, 2), move(r2, 0, 2, 1, 2), move(r1, 0, 0, 0, 1), move(r1, 1, 0, 0, 0)]
Yes (68.19s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 68.1800000000001

%%%%% Goal 21
% Query:
?- solve_problem(regular, 21, 10, Plan).
Plan = [shoot(r5), pass(r3, r5), move(r3, 2, 4, 3, 4), move(r3, 1, 4, 2, 4), move(r3, 0, 4, 1, 4), pass(r1, r3)]
Yes (26.82s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 26.8200000000001


% Query:
?- solve_problem(heuristic, 21, 10, Plan).
Plan = [shoot(r5), pass(r3, r5), move(r3, 2, 4, 3, 4), move(r3, 1, 4, 2, 4), move(r3, 0, 4, 1, 4), pass(r1, r3)]
Yes (18.61s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 18.6

%%%%% Goal 22
% Query:
?- solve_problem(heuristic, 22, 20, Plan).
Plan = [move(r1, 1, 4, 2, 4), move(r2, 2, 4, 3, 4), move(r1, 1, 3, 1, 4), move(r2, 1, 4, 2, 4), move(r1, 0, 3, 1, 3), move(r2, 1, 3, 1, 4), move(r1, 0, 2, 0, 3), move(r2, 0, 3, 1, 3)]
Yes (574.77s cpu, solution 1, maybe more)

% Output:
Elapsed time (sec): 574.77